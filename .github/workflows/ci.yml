name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/unit/ tests/integration/ --max-line-length=88 --ignore=E203,W503 --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/unit/ tests/integration/ --max-line-length=88 --ignore=E203,W503 --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics || echo "Linting check completed with warnings"
      continue-on-error: true

    - name: Format check with black
      run: |
        black --check --line-length=88 src/ tests/unit/ tests/integration/ || echo "Format check failed - consider running 'black --line-length=88 src/ tests/unit/ tests/integration/' locally"
      continue-on-error: true

    - name: Import sorting check with isort
      run: |
        isort --check-only --profile black src/ tests/unit/ tests/integration/ || echo "Import sorting check failed - consider running 'isort --profile black src/ tests/unit/ tests/integration/' locally"
      continue-on-error: true

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || echo "Type checking failed - consider running 'mypy src/ --ignore-missing-imports' locally"
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -q
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -q
    
    - name: Run pipeline smoke test
      run: |
        # Create necessary directories
        mkdir -p data/components data/weights data/monitoring artifacts mlruns
        
        # Create sample weights file for testing
        echo "symbol,weight" > data/weights/qqq_weights.csv
        echo "AAPL,0.1" >> data/weights/qqq_weights.csv
        echo "MSFT,0.1" >> data/weights/qqq_weights.csv
        
        # Run minimal pipeline test
        python -m src.run_pipeline --interval 1h --days 7 --max-symbols 2 || echo "Pipeline test completed (may fail due to data availability)"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          mlruns/
          artifacts/
          data/
